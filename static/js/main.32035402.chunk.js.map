{"version":3,"sources":["App.js","Calculator_Screen.jsx","Calculator_Button.js","Calculator_Body.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","_Users_jonbrown_Documents_GitHub_react_calculator_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_jonbrown_Documents_GitHub_react_calculator_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_jonbrown_Documents_GitHub_react_calculator_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","buttonOnClick","e","numRegex","numberSelected","test","target","value","newValue","calcString","state","numberSelectedLast","String","screenValue","action","setState","calcValue","eval","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","className","style","height","md","size","offset","_Calculator_Screen__WEBPACK_IMPORTED_MODULE_8__","id","_Calculator_Body__WEBPACK_IMPORTED_MODULE_9__","onClick","Component","__webpack_require__","d","__webpack_exports__","Calculator_Screen","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Calculator_Button","react_default","Calculator_Body_Calculator_Body","Calculator_Body","Fragment","reactstrap_es","noGutters","sm","xs","Calculator_Button_Calculator_Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32035402.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Container, Row, Col} from 'reactstrap';\n//import logo from './logo.svg';\nimport './App.css';\nimport {Calculator_Screen} from './Calculator_Screen';\nimport {Calculator_Body} from './Calculator_Body';\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      screenValue: 0,\n      calcString: \"\",\n      action: null,\n      numberSelectedLast: false\n    };\n  }\n\n  buttonOnClick = e => {\n    const numRegex = /\\d|\\./;\n    const numberSelected = numRegex.test(e.target.value);//true for numbers\n    \n    let newValue, calcString;\n    if(numberSelected) {\n      if (!this.state.numberSelectedLast){\n        newValue = e.target.value;\n        if(this.state.action){\n          calcString = this.state.calcString + this.state.action;\n          this.setState({\n            calcString: calcString\n          });\n        }  \n      } else {\n        newValue = String(this.state.screenValue) + String(e.target.value);\n      }\n      this.setState({\n        numberSelectedLast: true,\n        screenValue: newValue\n      });\n\n    } else if (e.target.value === \"=\") {\n      const calcValue = eval(this.state.calcString + this.state.screenValue);\n      this.setState({\n        numberSelectedLast: false,\n        screenValue: calcValue,\n        calcString: String(calcValue),\n        action: null\n      });\n\n    } else if (e.target.value === \"ce\") {\n      this.setState({\n        numberSelectedLast: false,\n        screenValue: 0,\n        calcString: \"\",\n        action: null\n      });\n      \n    } else {\n      const newValue = this.state.numberSelectedLast? eval(this.state.calcString + String(this.state.screenValue)): this.state.calcString\n      this.setState({\n        numberSelectedLast: false,\n        action: e.target.value,\n        screenValue: newValue,\n        calcString: newValue\n      });\n    }\n  }\n  \n  render() {\n    return (\n        <Container className=\"App\">\n              <Row style={{height:30}}/>\n              <Row>\n                <Col md={{ size: 4, offset: 4 }}>\n                  <Calculator_Screen id=\"display\" value={this.state.screenValue}/>\n                </Col>\n              </Row>\n              <Row>\n                <Col md={{ size: 4, offset: 4 }}>\n                  <Calculator_Body onClick={this.buttonOnClick}/>\n                </Col>\n              </Row>\n        </Container>\n    );\n  }\n}","import React from 'react';\n\nexport const Calculator_Screen = props => {\n    return <div className=\"screen\">{props.value}</div>\n}","import React from 'react';\n\nexport const Calculator_Button = props => {\n    return <button onClick={props.onClick} value={props.value}>\n            {props.value}\n        </button>\n}  \n","import React from 'react';\nimport {Row, Col} from 'reactstrap';\nimport {Calculator_Button} from './Calculator_Button';\n\nexport const Calculator_Body = props => {\n    //create a grid for all numbers\n    return <>\n            <Row noGutters>\n                <Col sm=\"9\">\n                    <Row noGutters> \n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"one\" value=\"1\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"two\" value=\"2\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"three\" value=\"3\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                    <Row noGutters>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"four\" value=\"4\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"five\" value=\"5\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"six\" value=\"6\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                    <Row noGutters>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"seven\" value=\"7\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"eight\" value=\"8\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"nine\" value=\"9\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                    <Row noGutters>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"zero\" value=\"0\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"decimal\" value=\".\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Calculator_Button id=\"equals\" value=\"=\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                </Col>\n                <Col sm=\"3\">\n                    <Calculator_Button id=\"add\" value=\"+\" onClick={props.onClick} />\n                    <Calculator_Button id=\"subtract\" value=\"-\" onClick={props.onClick} />\n                    <Calculator_Button id=\"multiply\" value=\"*\" onClick={props.onClick} />\n                    <Calculator_Button id=\"divide\" value=\"/\" onClick={props.onClick} />\n                    <Calculator_Button id=\"clear\" value=\"ce\" onClick={props.onClick} />\n                </Col>\n            </Row> \n        </>\n}  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}